/**
 *
 * Please note:
 * This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * Do not edit this file manually.
 *
 */

@file:Suppress(
    "ArrayInDataClass",
    "EnumEntryName",
    "RemoveRedundantQualifierName",
    "UnusedImport"
)

package org.sinou.android.kotlin.openapi.api

import org.sinou.android.kotlin.openapi.model.IdmSearchUserMetaRequest
import org.sinou.android.kotlin.openapi.model.JobsCtrlCommand
import org.sinou.android.kotlin.openapi.model.RestActionParameters
import org.sinou.android.kotlin.openapi.model.RestBackgroundAction
import org.sinou.android.kotlin.openapi.model.RestBatchUpdateMetaList
import org.sinou.android.kotlin.openapi.model.RestCreateRequest
import org.sinou.android.kotlin.openapi.model.RestError
import org.sinou.android.kotlin.openapi.model.RestListTemplatesResponse
import org.sinou.android.kotlin.openapi.model.RestLookupRequest
import org.sinou.android.kotlin.openapi.model.RestNamespaceValuesOperation
import org.sinou.android.kotlin.openapi.model.RestNamespaceValuesResponse
import org.sinou.android.kotlin.openapi.model.RestNode
import org.sinou.android.kotlin.openapi.model.RestNodeCollection
import org.sinou.android.kotlin.openapi.model.RestNodeUpdates
import org.sinou.android.kotlin.openapi.model.RestPerformActionResponse
import org.sinou.android.kotlin.openapi.model.RestPublicLinkDeleteSuccess
import org.sinou.android.kotlin.openapi.model.RestPublicLinkRequest
import org.sinou.android.kotlin.openapi.model.RestSelection
import org.sinou.android.kotlin.openapi.model.RestShareLink
import org.sinou.android.kotlin.openapi.model.RestUserMetaList
import org.sinou.android.kotlin.openapi.model.RestUserMetaNamespaceCollection

import org.sinou.android.kotlin.openapi.infrastructure.*
import io.ktor.client.HttpClientConfig
import io.ktor.client.request.forms.formData
import io.ktor.client.engine.HttpClientEngine
import io.ktor.http.ParametersBuilder

    open class NodeServiceApi(
    baseUrl: String = ApiClient.BASE_URL,
    httpClientEngine: HttpClientEngine? = null,
    httpClientConfig: ((HttpClientConfig<*>) -> Unit)? = null,
    ) : ApiClient(
        baseUrl,
        httpClientEngine,
        httpClientConfig,
    ) {

        /**
        * Retrieve information about an action running in background
        * 
         * @param name  
         * @param jobUuid  
         * @return RestBackgroundAction
        */
            @Suppress("UNCHECKED_CAST")
        open suspend fun backgroundActionInfo(name: kotlin.String, jobUuid: kotlin.String): HttpResponse<RestBackgroundAction> {

            val localVariableAuthNames = listOf<String>("Bearer")

            val localVariableBody = 
                    io.ktor.client.utils.EmptyContent

            val localVariableQuery = mutableMapOf<String, List<String>>()

            val localVariableHeaders = mutableMapOf<String, String>()

            val localVariableConfig = RequestConfig<kotlin.Any?>(
            RequestMethod.GET,
            "/n/action/{Name}/{JobUuid}".replace("{" + "Name" + "}", "$name").replace("{" + "JobUuid" + "}", "$jobUuid"),
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = true,
            )

            return request(
            localVariableConfig,
            localVariableBody,
            localVariableAuthNames
            ).wrap()
            }

        /**
        * Update/delete user meta in batch. Passed UserMetas must contain a NodeUuid
        * 
         * @param body  
         * @return RestBatchUpdateMetaList
        */
            @Suppress("UNCHECKED_CAST")
        open suspend fun batchUpdateMeta(body: RestBatchUpdateMetaList): HttpResponse<RestBatchUpdateMetaList> {

            val localVariableAuthNames = listOf<String>("Bearer")

            val localVariableBody = body

            val localVariableQuery = mutableMapOf<String, List<String>>()

            val localVariableHeaders = mutableMapOf<String, String>()

            val localVariableConfig = RequestConfig<kotlin.Any?>(
            RequestMethod.PATCH,
            "/n/meta/batch",
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = true,
            )

            return jsonRequest(
            localVariableConfig,
            localVariableBody,
            localVariableAuthNames
            ).wrap()
            }

        /**
        * Send control commands to a background job
        * 
         * @param name  
         * @param jobUuid  
         * @param command  
         * @return RestBackgroundAction
        */
            @Suppress("UNCHECKED_CAST")
        open suspend fun controlBackgroundAction(name: kotlin.String, jobUuid: kotlin.String, command: JobsCtrlCommand): HttpResponse<RestBackgroundAction> {

            val localVariableAuthNames = listOf<String>("Bearer")

            val localVariableBody = command

            val localVariableQuery = mutableMapOf<String, List<String>>()

            val localVariableHeaders = mutableMapOf<String, String>()

            val localVariableConfig = RequestConfig<kotlin.Any?>(
            RequestMethod.PATCH,
            "/n/action/{Name}/{JobUuid}".replace("{" + "Name" + "}", "$name").replace("{" + "JobUuid" + "}", "$jobUuid"),
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = true,
            )

            return jsonRequest(
            localVariableConfig,
            localVariableBody,
            localVariableAuthNames
            ).wrap()
            }

        /**
        * Create one or many files (empty or hydrated from a TemplateUuid) or folders
        * 
         * @param body  
         * @return RestNodeCollection
        */
            @Suppress("UNCHECKED_CAST")
        open suspend fun create(body: RestCreateRequest): HttpResponse<RestNodeCollection> {

            val localVariableAuthNames = listOf<String>("Bearer")

            val localVariableBody = body

            val localVariableQuery = mutableMapOf<String, List<String>>()

            val localVariableHeaders = mutableMapOf<String, String>()

            val localVariableConfig = RequestConfig<kotlin.Any?>(
            RequestMethod.POST,
            "/n/nodes/create",
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = true,
            )

            return jsonRequest(
            localVariableConfig,
            localVariableBody,
            localVariableAuthNames
            ).wrap()
            }

        /**
        * Create a public link on a given node
        * 
         * @param uuid  
         * @param publicLinkRequest  
         * @return RestShareLink
        */
            @Suppress("UNCHECKED_CAST")
        open suspend fun createPublicLink(uuid: kotlin.String, publicLinkRequest: RestPublicLinkRequest): HttpResponse<RestShareLink> {

            val localVariableAuthNames = listOf<String>("Bearer")

            val localVariableBody = publicLinkRequest

            val localVariableQuery = mutableMapOf<String, List<String>>()

            val localVariableHeaders = mutableMapOf<String, String>()

            val localVariableConfig = RequestConfig<kotlin.Any?>(
            RequestMethod.POST,
            "/n/node/{Uuid}/link".replace("{" + "Uuid" + "}", "$uuid"),
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = true,
            )

            return jsonRequest(
            localVariableConfig,
            localVariableBody,
            localVariableAuthNames
            ).wrap()
            }

        /**
        * Create and persist a temporary selection of nodes, that can be used by other actions
        * 
         * @param body Request to create a selection from a list of nodes. 
         * @return RestSelection
        */
            @Suppress("UNCHECKED_CAST")
        open suspend fun createSelection(body: RestSelection): HttpResponse<RestSelection> {

            val localVariableAuthNames = listOf<String>("Bearer")

            val localVariableBody = body

            val localVariableQuery = mutableMapOf<String, List<String>>()

            val localVariableHeaders = mutableMapOf<String, String>()

            val localVariableConfig = RequestConfig<kotlin.Any?>(
            RequestMethod.POST,
            "/n/selection",
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = true,
            )

            return jsonRequest(
            localVariableConfig,
            localVariableBody,
            localVariableAuthNames
            ).wrap()
            }

        /**
        * Remove a public link
        * 
         * @param linkUuid  
         * @return RestPublicLinkDeleteSuccess
        */
            @Suppress("UNCHECKED_CAST")
        open suspend fun deletePublicLink(linkUuid: kotlin.String): HttpResponse<RestPublicLinkDeleteSuccess> {

            val localVariableAuthNames = listOf<String>("Bearer")

            val localVariableBody = 
                    io.ktor.client.utils.EmptyContent

            val localVariableQuery = mutableMapOf<String, List<String>>()

            val localVariableHeaders = mutableMapOf<String, String>()

            val localVariableConfig = RequestConfig<kotlin.Any?>(
            RequestMethod.DELETE,
            "/n/link/{LinkUuid}".replace("{" + "LinkUuid" + "}", "$linkUuid"),
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = true,
            )

            return request(
            localVariableConfig,
            localVariableBody,
            localVariableAuthNames
            ).wrap()
            }

        /**
        * Load a node by its Uuid
        * 
         * @param uuid  
         * @param path  (optional)
         * @return RestNode
        */
            @Suppress("UNCHECKED_CAST")
        open suspend fun getByUuid(uuid: kotlin.String, path: kotlin.String?): HttpResponse<RestNode> {

            val localVariableAuthNames = listOf<String>("Bearer")

            val localVariableBody = 
                    io.ktor.client.utils.EmptyContent

            val localVariableQuery = mutableMapOf<String, List<String>>()
            path?.apply { localVariableQuery["Path"] = listOf("$path") }

            val localVariableHeaders = mutableMapOf<String, String>()

            val localVariableConfig = RequestConfig<kotlin.Any?>(
            RequestMethod.GET,
            "/n/node/{Uuid}".replace("{" + "Uuid" + "}", "$uuid"),
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = true,
            )

            return request(
            localVariableConfig,
            localVariableBody,
            localVariableAuthNames
            ).wrap()
            }

        /**
        * Load public link information by Uuid
        * 
         * @param linkUuid  
         * @return RestShareLink
        */
            @Suppress("UNCHECKED_CAST")
        open suspend fun getPublicLink(linkUuid: kotlin.String): HttpResponse<RestShareLink> {

            val localVariableAuthNames = listOf<String>("Bearer")

            val localVariableBody = 
                    io.ktor.client.utils.EmptyContent

            val localVariableQuery = mutableMapOf<String, List<String>>()

            val localVariableHeaders = mutableMapOf<String, String>()

            val localVariableConfig = RequestConfig<kotlin.Any?>(
            RequestMethod.GET,
            "/n/link/{LinkUuid}".replace("{" + "LinkUuid" + "}", "$linkUuid"),
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = true,
            )

            return request(
            localVariableConfig,
            localVariableBody,
            localVariableAuthNames
            ).wrap()
            }

        /**
        * List values for a given namespace
        * 
         * @param namespace List persisted values for this namespace 
         * @param operationOperation  
         * @param operationValues  
         * @return RestNamespaceValuesResponse
        */
            @Suppress("UNCHECKED_CAST")
        open suspend fun listNamespaceValues(namespace: kotlin.String, operationOperation: kotlin.String, operationValues: kotlin.collections.List<kotlin.String>): HttpResponse<RestNamespaceValuesResponse> {

            val localVariableAuthNames = listOf<String>("Bearer")

            val localVariableBody = 
                    io.ktor.client.utils.EmptyContent

            val localVariableQuery = mutableMapOf<String, List<String>>()
            operationOperation?.apply { localVariableQuery["Operation.Operation"] = listOf("$operationOperation") }
            operationValues?.apply { localVariableQuery["Operation.Values"] = toMultiValue(this, "multi") }

            val localVariableHeaders = mutableMapOf<String, String>()

            val localVariableConfig = RequestConfig<kotlin.Any?>(
            RequestMethod.GET,
            "/n/meta/namespace/{Namespace}".replace("{" + "Namespace" + "}", "$namespace"),
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = true,
            )

            return request(
            localVariableConfig,
            localVariableBody,
            localVariableAuthNames
            ).wrap()
            }

        /**
        * List defined meta namespaces
        * 
         * @return RestUserMetaNamespaceCollection
        */
            @Suppress("UNCHECKED_CAST")
        open suspend fun listNamespaces(): HttpResponse<RestUserMetaNamespaceCollection> {

            val localVariableAuthNames = listOf<String>("Bearer")

            val localVariableBody = 
                    io.ktor.client.utils.EmptyContent

            val localVariableQuery = mutableMapOf<String, List<String>>()

            val localVariableHeaders = mutableMapOf<String, String>()

            val localVariableConfig = RequestConfig<kotlin.Any?>(
            RequestMethod.GET,
            "/n/meta/namespace",
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = true,
            )

            return request(
            localVariableConfig,
            localVariableBody,
            localVariableAuthNames
            ).wrap()
            }

        /**
        * List all known versions of a node
        * 
         * @param uuid  
         * @param path  (optional)
         * @return RestNodeCollection
        */
            @Suppress("UNCHECKED_CAST")
        open suspend fun listVersions(uuid: kotlin.String, path: kotlin.String?): HttpResponse<RestNodeCollection> {

            val localVariableAuthNames = listOf<String>("Bearer")

            val localVariableBody = 
                    io.ktor.client.utils.EmptyContent

            val localVariableQuery = mutableMapOf<String, List<String>>()
            path?.apply { localVariableQuery["Path"] = listOf("$path") }

            val localVariableHeaders = mutableMapOf<String, String>()

            val localVariableConfig = RequestConfig<kotlin.Any?>(
            RequestMethod.GET,
            "/n/node/{Uuid}/versions".replace("{" + "Uuid" + "}", "$uuid"),
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = true,
            )

            return request(
            localVariableConfig,
            localVariableBody,
            localVariableAuthNames
            ).wrap()
            }

        /**
        * Generic request to either list (using Locators) or search (using Query) for nodes
        * 
         * @param body  
         * @return RestNodeCollection
        */
            @Suppress("UNCHECKED_CAST")
        open suspend fun lookup(body: RestLookupRequest): HttpResponse<RestNodeCollection> {

            val localVariableAuthNames = listOf<String>("Bearer")

            val localVariableBody = body

            val localVariableQuery = mutableMapOf<String, List<String>>()

            val localVariableHeaders = mutableMapOf<String, String>()

            val localVariableConfig = RequestConfig<kotlin.Any?>(
            RequestMethod.POST,
            "/n/nodes",
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = true,
            )

            return jsonRequest(
            localVariableConfig,
            localVariableBody,
            localVariableAuthNames
            ).wrap()
            }

        /**
        * PatchNode is used to update a node specific meta. It is used for reserved meta as well (bookmarks, contentLock)
        * 
         * @param uuid  
         * @param nodeUpdates  
         * @return RestNode
        */
            @Suppress("UNCHECKED_CAST")
        open suspend fun patchNode(uuid: kotlin.String, nodeUpdates: RestNodeUpdates): HttpResponse<RestNode> {

            val localVariableAuthNames = listOf<String>("Bearer")

            val localVariableBody = nodeUpdates

            val localVariableQuery = mutableMapOf<String, List<String>>()

            val localVariableHeaders = mutableMapOf<String, String>()

            val localVariableConfig = RequestConfig<kotlin.Any?>(
            RequestMethod.PATCH,
            "/n/node/{Uuid}".replace("{" + "Uuid" + "}", "$uuid"),
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = true,
            )

            return jsonRequest(
            localVariableConfig,
            localVariableBody,
            localVariableAuthNames
            ).wrap()
            }

        /**
        * Trigger an action on the tree. Returns a JobInfo describing a background task.
        * 
         * @param name  
         * @param parameters  
         * @param jobUuid  (optional)
         * @return RestPerformActionResponse
        */
            @Suppress("UNCHECKED_CAST")
        open suspend fun performAction(name: kotlin.String, parameters: RestActionParameters, jobUuid: kotlin.String?): HttpResponse<RestPerformActionResponse> {

            val localVariableAuthNames = listOf<String>("Bearer")

            val localVariableBody = parameters

            val localVariableQuery = mutableMapOf<String, List<String>>()
            jobUuid?.apply { localVariableQuery["JobUuid"] = listOf("$jobUuid") }

            val localVariableHeaders = mutableMapOf<String, String>()

            val localVariableConfig = RequestConfig<kotlin.Any?>(
            RequestMethod.POST,
            "/n/action/{Name}".replace("{" + "Name" + "}", "$name"),
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = true,
            )

            return jsonRequest(
            localVariableConfig,
            localVariableBody,
            localVariableAuthNames
            ).wrap()
            }

        /**
        * Search a list of meta by node Id or by User id and by namespace
        * 
         * @param body  
         * @return RestUserMetaList
        */
            @Suppress("UNCHECKED_CAST")
        open suspend fun searchMeta(body: IdmSearchUserMetaRequest): HttpResponse<RestUserMetaList> {

            val localVariableAuthNames = listOf<String>("Bearer")

            val localVariableBody = body

            val localVariableQuery = mutableMapOf<String, List<String>>()

            val localVariableHeaders = mutableMapOf<String, String>()

            val localVariableConfig = RequestConfig<kotlin.Any?>(
            RequestMethod.POST,
            "/n/meta/find",
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = true,
            )

            return jsonRequest(
            localVariableConfig,
            localVariableBody,
            localVariableAuthNames
            ).wrap()
            }

        /**
        * List available templates for hydrating empty files
        * 
         * @param templateType  (optional)
         * @return RestListTemplatesResponse
        */
            @Suppress("UNCHECKED_CAST")
        open suspend fun templates(templateType: kotlin.String?): HttpResponse<RestListTemplatesResponse> {

            val localVariableAuthNames = listOf<String>("Bearer")

            val localVariableBody = 
                    io.ktor.client.utils.EmptyContent

            val localVariableQuery = mutableMapOf<String, List<String>>()
            templateType?.apply { localVariableQuery["TemplateType"] = listOf("$templateType") }

            val localVariableHeaders = mutableMapOf<String, String>()

            val localVariableConfig = RequestConfig<kotlin.Any?>(
            RequestMethod.GET,
            "/n/templates",
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = true,
            )

            return request(
            localVariableConfig,
            localVariableBody,
            localVariableAuthNames
            ).wrap()
            }

        /**
        * Add/delete a values for a given namespace
        * 
         * @param namespace List persisted values for this namespace 
         * @param operation  
         * @return RestNamespaceValuesResponse
        */
            @Suppress("UNCHECKED_CAST")
        open suspend fun updateNamespaceValues(namespace: kotlin.String, operation: RestNamespaceValuesOperation): HttpResponse<RestNamespaceValuesResponse> {

            val localVariableAuthNames = listOf<String>("Bearer")

            val localVariableBody = operation

            val localVariableQuery = mutableMapOf<String, List<String>>()

            val localVariableHeaders = mutableMapOf<String, String>()

            val localVariableConfig = RequestConfig<kotlin.Any?>(
            RequestMethod.PATCH,
            "/n/meta/namespace/{Namespace}".replace("{" + "Namespace" + "}", "$namespace"),
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = true,
            )

            return jsonRequest(
            localVariableConfig,
            localVariableBody,
            localVariableAuthNames
            ).wrap()
            }

        /**
        * Update public link settings
        * 
         * @param linkUuid  
         * @param publicLinkRequest  
         * @return RestShareLink
        */
            @Suppress("UNCHECKED_CAST")
        open suspend fun updatePublicLink(linkUuid: kotlin.String, publicLinkRequest: RestPublicLinkRequest): HttpResponse<RestShareLink> {

            val localVariableAuthNames = listOf<String>("Bearer")

            val localVariableBody = publicLinkRequest

            val localVariableQuery = mutableMapOf<String, List<String>>()

            val localVariableHeaders = mutableMapOf<String, String>()

            val localVariableConfig = RequestConfig<kotlin.Any?>(
            RequestMethod.PATCH,
            "/n/link/{LinkUuid}".replace("{" + "LinkUuid" + "}", "$linkUuid"),
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = true,
            )

            return jsonRequest(
            localVariableConfig,
            localVariableBody,
            localVariableAuthNames
            ).wrap()
            }

        /**
        * Special API for Bookmarks, will load userMeta and the associated nodes, and return as a node list
        * 
         * @param all  (optional)
         * @return RestNodeCollection
        */
            @Suppress("UNCHECKED_CAST")
        open suspend fun userBookmarks(all: kotlin.Boolean?): HttpResponse<RestNodeCollection> {

            val localVariableAuthNames = listOf<String>("Bearer")

            val localVariableBody = 
                    io.ktor.client.utils.EmptyContent

            val localVariableQuery = mutableMapOf<String, List<String>>()
            all?.apply { localVariableQuery["All"] = listOf("$all") }

            val localVariableHeaders = mutableMapOf<String, String>()

            val localVariableConfig = RequestConfig<kotlin.Any?>(
            RequestMethod.GET,
            "/n/nodes/bookmarks",
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = true,
            )

            return request(
            localVariableConfig,
            localVariableBody,
            localVariableAuthNames
            ).wrap()
            }

        }
